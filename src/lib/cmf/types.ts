/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Precomputed engine evaluation data for a specific position, used to provide analysis insights.
 */
export type PrecomputedEval = {
  [k: string]: unknown;
} & {
  /**
   * FEN string representing the board position evaluated.
   */
  fen: string;
  /**
   * The search depth at which the evaluation was performed.
   */
  depth: number;
  /**
   * Centipawn evaluation score indicating positional advantage (positive for white, negative for black).
   */
  cp?: number;
  /**
   * Mate score indicating number of moves to mate (positive if white mates, negative if black mates).
   */
  mate?: number;
  /**
   * List of up to five best moves suggested by the engine for this position.
   *
   * @maxItems 5
   */
  best?:
    | []
    | [string]
    | [string, string]
    | [string, string, string]
    | [string, string, string, string]
    | [string, string, string, string, string];
};
/**
 * A union type representing any valid event that can occur in a node.
 */
export type Event =
  | MoveEvent
  | EditEvent
  | SequenceEvent
  | AnnotateEvent
  | TextEvent
  | PausePointEvent
  | ClearAnnotationsEvent
  | NavigateEvent;

/**
 * The Chessmeld Meld Format (CMF) v0.0.1 uses a graph structure for positions and a flat chronological event list for audio-synced content, enabling efficient representation of complex branching with linear event processing. Includes legal policy system for flexible recording modes.
 */
export interface ChessmeldMeldFormatCMFV001 {
  /**
   * Identifies the schema version; must be 'cmf.v0.0.1' for this version.
   */
  schema: "cmf.v0.0.1";
  /**
   * Metadata describing the chess game, including identifiers, authorship, timing, and initial board state.
   */
  meta: {
    /**
     * Unique identifier for this meld document.
     */
    id: string;
    /**
     * The title or name of the chess game or analysis.
     */
    title: string;
    /**
     * Name of the individual or entity that created this meld.
     */
    author: string;
    /**
     * Timestamp indicating when this meld was created, in ISO 8601 format.
     */
    createdAt: string;
    /**
     * The Forsyth-Edwards Notation (FEN) string representing the initial board position of the game.
     */
    startingFen: string;
    /**
     * Optional URI linking to an audio commentary or related media.
     */
    audioUrl?: string;
    /**
     * Optional URI linking to a transcript file with word-level timestamps (e.g., WhisperX output).
     */
    transcriptUrl?: string;
    /**
     * Duration in milliseconds representing the total playback or presentation length of the meld.
     */
    durationMs: number;
    /**
     * An optional list of tags or keywords categorizing or describing the meld.
     */
    tags?: string[];
    /**
     * Flag indicating whether engine evaluation hints should be displayed during playback.
     */
    engineHints?: boolean;
  };
  /**
   * Default settings used during recording, including legal policy and validation rules.
   */
  recordingDefaults?: {
    /**
     * The legal policy used for move validation during recording. 'strict' enforces full chess rules, 'pieceLegal' allows piece-legal moves without turn alternation, 'none' allows any moves.
     */
    legalPolicy?: "strict" | "pieceLegal" | "none";
  };
  /**
   * The FEN string of the root position in the nodes collection.
   */
  rootNodeId: string;
  /**
   * Collection of all position nodes in the game tree, indexed by FEN string. Each FEN string uniquely identifies a chess position.
   */
  nodes: {
    [k: string]: PositionNode;
  };
  /**
   * Visual overlay elements that can be displayed on the board, such as legends or annotations.
   */
  overlays?: {
    /**
     * A textual legend or explanation for symbols and annotations used in the meld.
     */
    legend?: string;
  };
  /**
   * An optional list of precomputed engine evaluation data for specific board positions to enhance analysis.
   */
  precomputed?: PrecomputedEval[];
  /**
   * Chronological list of all events (moves, annotations, text, pauses) that occur during the game.
   */
  events: Event[];
}
/**
 * A node in the game graph representing a chess position and its possible continuations. The FEN string serves as the unique identifier.
 */
export interface PositionNode {
  /**
   * The Forsyth-Edwards Notation (FEN) string representing the board position at this node. This also serves as the unique identifier.
   */
  fen: string;
  /**
   * References to child nodes representing possible moves from this position.
   */
  children?: ChildReference[];
  /**
   * References to parent nodes that can reach this position.
   */
  parents?: ParentReference[];
  /**
   * Optional label or name for this node (useful for variations).
   */
  label?: string;
  /**
   * Optional commentary about this position or variation.
   */
  comment?: string;
  /**
   * The move number this position represents (0 for initial position).
   */
  moveNumber?: number;
}
/**
 * A reference to a child node representing a move from a parent position.
 */
export interface ChildReference {
  /**
   * The move in Standard Algebraic Notation (SAN) that leads to this child node.
   */
  move: string;
  /**
   * The FEN string of the child position.
   */
  fen: string;
  /**
   * Optional label for this move variation.
   */
  label?: string;
  /**
   * Optional commentary about this move or variation.
   */
  comment?: string;
}
/**
 * A reference to a parent node that can reach this position.
 */
export interface ParentReference {
  /**
   * The FEN string of the parent position.
   */
  fen: string;
  /**
   * The move from the parent that leads to this node.
   */
  move: string;
  /**
   * Optional label for this parent relationship.
   */
  label?: string;
}
/**
 * Event representing a chess move with explicit square coordinates, legal policy, FEN position, and optional SAN notation.
 */
export interface MoveEvent {
  /**
   * Timestamp in milliseconds when this event occurs.
   */
  t: number;
  type: "move";
  /**
   * The source square of the move.
   */
  from: string;
  /**
   * The destination square of the move.
   */
  to: string;
  /**
   * Promotion piece if this is a promotion move.
   */
  promo?: "q" | "r" | "b" | "n";
  /**
   * The legal policy used to validate this move.
   */
  legalPolicy: "strict" | "pieceLegal" | "none";
  /**
   * The color of the player who made this move ('w' for white, 'b' for black).
   */
  color: "w" | "b";
  /**
   * Optional move number in the game sequence. In standard chess, this represents the full move number (1, 2, 3, etc.) where each move number includes both white and black moves. May be omitted in non-standard modes like Classroom or Free mode where consecutive moves by the same color don't increment the turn number.
   */
  moveNumber?: number;
  /**
   * Standard Algebraic Notation for the move, if applicable.
   */
  san?: string;
  /**
   * Optional textual commentary or explanation associated with the move.
   */
  comment?: string;
  /**
   * FEN (Forsyth-Edwards Notation) string representing the position after this move is applied. This provides the complete board state including piece positions, active color, castling rights, en passant target, halfmove clock, and fullmove number. Required for state verification and debugging.
   */
  fen: string;
}
/**
 * Event for directly editing board state, such as placing pieces or setting game properties.
 */
export interface EditEvent {
  /**
   * Timestamp in milliseconds when this event occurs.
   */
  t: number;
  /**
   * The type of edit operation.
   */
  type: "setPiece" | "setTurn" | "setCastling" | "setEnPassant" | "setClock" | "setFen";
  /**
   * The square being edited (for setPiece, setEnPassant).
   */
  square?: string;
  /**
   * The piece to place (for setPiece). null means remove piece.
   */
  piece?: "K" | "Q" | "R" | "B" | "N" | "P" | "k" | "q" | "r" | "b" | "n" | "p";
  /**
   * The color to set (for setTurn).
   */
  color?: "w" | "b";
  /**
   * White castling rights (for setCastling).
   */
  white?: "" | "K" | "Q" | "KQ";
  /**
   * Black castling rights (for setCastling).
   */
  black?: "" | "k" | "q" | "kq";
  /**
   * White's remaining time in milliseconds (for setClock).
   */
  whiteMs?: number;
  /**
   * Black's remaining time in milliseconds (for setClock).
   */
  blackMs?: number;
  /**
   * Complete FEN string (for setFen).
   */
  fen?: string;
}
/**
 * Event for grouping related moves or operations into sequences.
 */
export interface SequenceEvent {
  /**
   * Timestamp in milliseconds when this event occurs.
   */
  t: number;
  /**
   * The type of sequence event.
   */
  type: "beginSetupSequence" | "endSetupSequence";
  /**
   * Optional label for the sequence (for beginSetupSequence).
   */
  label?: string;
  /**
   * Optional color focus for the sequence (for beginSetupSequence).
   */
  colorFocus?: "w" | "b";
}
/**
 * Event for adding visual annotations such as arrows, circles, highlights, and notes to the board.
 */
export interface AnnotateEvent {
  /**
   * Timestamp in milliseconds when this event occurs.
   */
  t: number;
  type: "annotate";
  /**
   * The FEN string of the position this event relates to.
   */
  fen: string;
  /**
   * List of arrows to be drawn on the board for visual emphasis.
   */
  arrows?: ColoredArrow[];
  /**
   * Squares to be circled on the board to highlight important positions.
   */
  circles?: ColoredSquare[];
  /**
   * Squares to be highlighted with background color to emphasize important positions.
   */
  highlights?: ColoredSquare[];
  /**
   * Optional textual note providing additional explanation or commentary.
   */
  note?: string;
}
/**
 * An arrow annotation with color information.
 */
export interface ColoredArrow {
  /**
   * The starting square of the arrow.
   */
  from: string;
  /**
   * The ending square of the arrow.
   */
  to: string;
  /**
   * The color of the arrow annotation.
   */
  color?: "green" | "red" | "yellow" | "blue";
}
/**
 * A square annotation with color information.
 */
export interface ColoredSquare {
  /**
   * The chessboard square to annotate.
   */
  square: string;
  /**
   * The color of the square annotation.
   */
  color?: "green" | "red" | "yellow" | "blue";
}
/**
 * Event containing arbitrary textual information to be displayed at a specific time.
 */
export interface TextEvent {
  /**
   * Timestamp in milliseconds when this event occurs.
   */
  t: number;
  type: "text";
  /**
   * The FEN string of the position this event relates to.
   */
  fen: string;
  /**
   * The textual content to display.
   */
  text: string;
}
/**
 * Event marking a pause point in the meld, optionally including a prompt for user interaction.
 */
export interface PausePointEvent {
  /**
   * Timestamp in milliseconds when this event occurs.
   */
  t: number;
  type: "pausepoint";
  /**
   * The FEN string of the position this event relates to.
   */
  fen: string;
  /**
   * Unique identifier for this pause point.
   */
  id: string;
  /**
   * Optional prompt message displayed when the pause point is reached.
   */
  prompt?: string;
}
/**
 * Event indicating that all annotations should be cleared from the board.
 */
export interface ClearAnnotationsEvent {
  /**
   * Timestamp in milliseconds when this clear event occurs.
   */
  t: number;
  type: "clear";
  /**
   * The FEN string of the position this event relates to.
   */
  fen: string;
  /**
   * Optional commentary about why annotations were cleared.
   */
  comment?: string;
}
/**
 * Event representing navigation to a specific position in the game tree.
 */
export interface NavigateEvent {
  /**
   * Timestamp in milliseconds when this navigation event occurs.
   */
  t: number;
  type: "navigate";
  /**
   * The FEN string of the position being navigated to.
   */
  fen: string;
  /**
   * The type of navigation action performed.
   */
  navigationType: "to_node" | "to_move_index" | "back" | "forward" | "start" | "latest";
  /**
   * Optional move index when navigationType is 'to_move_index'.
   */
  targetMoveIndex?: number;
  /**
   * Optional commentary about the navigation action.
   */
  comment?: string;
}
